angsd.output <- angsd.output %>% dplyr::select(n, Chromosome, Position, neg10)
sig.threshold <- CalcThreshold(angsd.output, sig.level = 0.01, method = "BH")
outlier_SNPs <- filter(angsd.output, neg10 > sig.threshold)
if (nrow(outlier_SNPs) > 0){#Create new column where gene hits will be saved
outlier_SNPs$gene_id <- NA
outlier_SNPs$gene_name <- NA
for (ROW in 1:nrow(outlier_SNPs)){
print(paste0("Processing SNP ", ROW))
Genes_within_range <- getBM(attributes=c('ensembl_gene_id','external_gene_name','chromosome_name','start_position','end_position','gene_biotype'),
mart = ensembl,
filter = c('chromosome_name','start','end'),
values = list(outlier_SNPs$Chromosome[ROW],
outlier_SNPs$Position[ROW],
outlier_SNPs$Position[ROW]))
if (nrow(Genes_within_range) > 0){
Unique_protein_coding <- filter(Genes_within_range, gene_biotype == "protein_coding") %>%
dplyr::select(external_gene_name, ensembl_gene_id) %>% unique()
if (nrow(Unique_protein_coding) > 0){
outlier_SNPs$gene_id[ROW] <- Unique_protein_coding$ensembl_gene_id
outlier_SNPs$gene_name[ROW] <- Unique_protein_coding$external_gene_name
}
}
}
rm(Unique_protein_coding, Genes_within_range)
write.table(outlier_SNPs, paste0("outlier_SNPs/chr1_association_",PHENO,"_outliers.txt"), row.names = FALSE, quote = FALSE, sep = "\t")
outlier_SNPs <- read.delim(paste0("outlier_SNPs/chr1_association_",PHENO,"_outliers.txt"))
}
#For each chromosome find centre in n - used to add x axis labels
axisdf <- angsd.output %>% group_by(Chromosome) %>% summarize(center=(max(n) + min(n) ) / 2 )
if (nrow(outlier_SNPs) > 0){
pdf(file = paste0("Plots/","GWAS_",PHENO,".pdf"), height = 4, width = 10)
WholeGenome <- ggplot(angsd.output, aes(x=n, y=neg10, color=as.factor(Chromosome))) +
# Show all points
geom_point(size=0.75) +
scale_color_manual(values = rep(c("#242565","#46557E"), 26 )) +
geom_hline(yintercept = sig.threshold, linetype = "dashed", colour = "grey37") +
#geom_point(data = outlier_SNPs, colour = "#F71927", size=0.75) +
#ggrepel::geom_text_repel(data = outlier_SNPs, aes(label = gene_name), size = 3, colour = "black", force = 15, na.rm = TRUE, max.overlaps = Inf,min.segment.length = 0) +
# custom X axis:
scale_x_continuous(label = axisdf$Chromosome, breaks= axisdf$center , expand = c(0.01, 0.01)) +
#scale_y_continuous(limits = c(0,0.31), expand = c(0.01, 0.01) ) +     # remove space between plot area and x axis
labs(x = "Chromosome") +
# Custom the theme:
theme_classic() +
theme(legend.position="none", panel.border = element_blank())
print(WholeGenome)
dev.off()
} else {
pdf(file = paste0("Plots/","GWAS_",PHENO,".pdf"), height = 4, width = 10)
WholeGenome <- ggplot(angsd.output, aes(x=n, y=neg10, color=as.factor(Chromosome))) +
# Show all points
geom_point(size=0.75) +
scale_color_manual(values = rep(c("#242565","#46557E"), 26 )) +
geom_hline(yintercept = sig.threshold, linetype = "dashed", colour = "grey37") +
# custom X axis:
scale_x_continuous(label = axisdf$Chromosome, breaks= axisdf$center , expand = c(0.01, 0.01)) +
labs(x = "Chromosome") +
# Custom the theme:
theme_classic() +
theme(legend.position="none", panel.border = element_blank())
print(WholeGenome)
dev.off()
}
axisdf
if (nrow(outlier_SNPs) > 0){
pdf(file = paste0("Plots/","GWAS_",PHENO,".pdf"), height = 4, width = 10)
WholeGenome <- ggplot(angsd.output, aes(x=n, y=neg10, color=as.factor(Chromosome))) +
# Show all points
geom_point(size=0.75) +
scale_color_manual(values = rep(c("#242565","#46557E"), 26 )) +
geom_hline(yintercept = sig.threshold, linetype = "dashed", colour = "grey37") +
#geom_point(data = outlier_SNPs, colour = "#F71927", size=0.75) +
#ggrepel::geom_text_repel(data = outlier_SNPs, aes(label = gene_name), size = 3, colour = "black", force = 15, na.rm = TRUE, max.overlaps = Inf,min.segment.length = 0) +
# custom X axis:
scale_x_continuous(label = axisdf$Chromosome, breaks= axisdf$center , expand = c(0.01, 0.01)) +
#scale_y_continuous(limits = c(0,0.31), expand = c(0.01, 0.01) ) +     # remove space between plot area and x axis
labs(x = "Chromosome") +
# Custom the theme:
theme_classic() +
theme(legend.position="none", panel.border = element_blank())
print(WholeGenome)
dev.off()
} else {
pdf(file = paste0("Plots/","GWAS_",PHENO,".pdf"), height = 4, width = 10)
WholeGenome <- ggplot(angsd.output, aes(x=n, y=neg10, color=as.factor(Chromosome))) +
# Show all points
geom_point(size=0.75) +
scale_color_manual(values = rep(c("#242565","#46557E"), 26 )) +
geom_hline(yintercept = sig.threshold, linetype = "dashed", colour = "grey37") +
# custom X axis:
#scale_x_continuous(label = axisdf$Chromosome, breaks= axisdf$center , expand = c(0.01, 0.01)) +
labs(x = "Chromosome") +
# Custom the theme:
theme_classic() +
theme(legend.position="none", panel.border = element_blank())
print(WholeGenome)
dev.off()
}
sig.threshold
dev.off()
if (nrow(outlier_SNPs) > 0){
pdf(file = paste0("Plots/","GWAS_",PHENO,".pdf"), height = 4, width = 10)
WholeGenome <- ggplot(angsd.output, aes(x=n, y=neg10, color=as.factor(Chromosome))) +
# Show all points
geom_point(size=0.75) +
scale_color_manual(values = rep(c("#242565","#46557E"), 26 )) +
geom_hline(yintercept = sig.threshold, linetype = "dashed", colour = "grey37") +
#geom_point(data = outlier_SNPs, colour = "#F71927", size=0.75) +
#ggrepel::geom_text_repel(data = outlier_SNPs, aes(label = gene_name), size = 3, colour = "black", force = 15, na.rm = TRUE, max.overlaps = Inf,min.segment.length = 0) +
# custom X axis:
scale_x_continuous(label = axisdf$Chromosome, breaks= axisdf$center , expand = c(0.01, 0.01)) +
#scale_y_continuous(limits = c(0,0.31), expand = c(0.01, 0.01) ) +     # remove space between plot area and x axis
labs(x = "Chromosome") +
# Custom the theme:
theme_classic() +
theme(legend.position="none", panel.border = element_blank())
print(WholeGenome)
dev.off()
} else {
pdf(file = paste0("Plots/","GWAS_",PHENO,".pdf"), height = 4, width = 10)
WholeGenome <- ggplot(angsd.output, aes(x=n, y=neg10, color=as.factor(Chromosome))) +
# Show all points
geom_point(size=0.75) +
scale_color_manual(values = rep(c("#242565","#46557E"), 26 )) +
#geom_hline(yintercept = sig.threshold, linetype = "dashed", colour = "grey37") +
# custom X axis:
scale_x_continuous(label = axisdf$Chromosome, breaks= axisdf$center , expand = c(0.01, 0.01)) +
labs(x = "Chromosome") +
# Custom the theme:
theme_classic() +
theme(legend.position="none", panel.border = element_blank())
print(WholeGenome)
dev.off()
}
PHENO="body_length"
angsd.output <- read.delim(gzfile(paste0("chr1/chr1_association_",PHENO,".lrt0.gz"))) %>% filter(LRT >= 0)
for (CHROM in 2:26){
temp <- read.delim(gzfile(paste0("chr",CHROM,"/chr",CHROM,"_association_",PHENO,".lrt0.gz"))) %>% filter(LRT >= 0)
angsd.output <- rbind(angsd.output, temp)
rm(temp)
}
angsd.output$n <- 1:nrow(angsd.output)
angsd.output$Chromosome <- as.numeric(str_remove(angsd.output$Chromosome, "chr"))
angsd.output$neg10 <- -log10(angsd.output$P)
angsd.output <- angsd.output %>% dplyr::select(n, Chromosome, Position, neg10)
sig.threshold <- CalcThreshold(angsd.output, sig.level = 0.01, method = "BH")
PHENO="body_length_spawing_as_cov"
angsd.output <- read.delim(gzfile(paste0("chr1/chr1_association_",PHENO,".lrt0.gz"))) %>% filter(LRT >= 0)
for (CHROM in 2:26){
temp <- read.delim(gzfile(paste0("chr",CHROM,"/chr",CHROM,"_association_",PHENO,".lrt0.gz"))) %>% filter(LRT >= 0)
angsd.output <- rbind(angsd.output, temp)
rm(temp)
}
angsd.output$n <- 1:nrow(angsd.output)
angsd.output$Chromosome <- as.numeric(str_remove(angsd.output$Chromosome, "chr"))
angsd.output$neg10 <- -log10(angsd.output$P)
angsd.output <- angsd.output %>% dplyr::select(n, Chromosome, Position, neg10)
#sig.threshold <- CalcThreshold(angsd.output, sig.level = 0.01, method = "BH")
outlier_SNPs <- filter(angsd.output, neg10 > sig.threshold)
if (nrow(outlier_SNPs) > 0){
#Create new column where gene hits will be saved
outlier_SNPs$gene_id <- NA
outlier_SNPs$gene_name <- NA
for (ROW in 1:nrow(outlier_SNPs)){
print(paste0("Processing SNP ", ROW))
Genes_within_range <- getBM(attributes=c('ensembl_gene_id','external_gene_name','chromosome_name','start_position','end_position','gene_biotype'),
mart = ensembl,
filter = c('chromosome_name','start','end'),
values = list(outlier_SNPs$Chromosome[ROW],
outlier_SNPs$Position[ROW],
outlier_SNPs$Position[ROW]))
if (nrow(Genes_within_range) > 0){
Unique_protein_coding <- filter(Genes_within_range, gene_biotype == "protein_coding") %>%
dplyr::select(external_gene_name, ensembl_gene_id) %>% unique()
if (nrow(Unique_protein_coding) > 0){
outlier_SNPs$gene_id[ROW] <- Unique_protein_coding$ensembl_gene_id
outlier_SNPs$gene_name[ROW] <- Unique_protein_coding$external_gene_name
}
}
}
rm(Unique_protein_coding, Genes_within_range)
write.table(outlier_SNPs, paste0("outlier_SNPs/chr1_association_",PHENO,"_outliers.txt"), row.names = FALSE, quote = FALSE, sep = "\t")
outlier_SNPs <- read.delim(paste0("outlier_SNPs/chr1_association_",PHENO,"_outliers.txt"))
}
#For each chromosome find centre in n - used to add x axis labels
axisdf <- angsd.output %>% group_by(Chromosome) %>% summarize(center=(max(n) + min(n) ) / 2 )
if (nrow(outlier_SNPs) > 0){
pdf(file = paste0("Plots/","GWAS_",PHENO,".pdf"), height = 4, width = 10)
WholeGenome <- ggplot(angsd.output, aes(x=n, y=neg10, color=as.factor(Chromosome))) +
# Show all points
geom_point(size=0.75) +
scale_color_manual(values = rep(c("#242565","#46557E"), 26 )) +
geom_hline(yintercept = sig.threshold, linetype = "dashed", colour = "grey37") +
#geom_point(data = outlier_SNPs, colour = "#F71927", size=0.75) +
#ggrepel::geom_text_repel(data = outlier_SNPs, aes(label = gene_name), size = 3, colour = "black", force = 15, na.rm = TRUE, max.overlaps = Inf,min.segment.length = 0) +
# custom X axis:
scale_x_continuous(label = axisdf$Chromosome, breaks= axisdf$center , expand = c(0.01, 0.01)) +
#scale_y_continuous(limits = c(0,0.31), expand = c(0.01, 0.01) ) +     # remove space between plot area and x axis
labs(x = "Chromosome") +
# Custom the theme:
theme_classic() +
theme(legend.position="none", panel.border = element_blank())
print(WholeGenome)
dev.off()
} else {
pdf(file = paste0("Plots/","GWAS_",PHENO,".pdf"), height = 4, width = 10)
WholeGenome <- ggplot(angsd.output, aes(x=n, y=neg10, color=as.factor(Chromosome))) +
# Show all points
geom_point(size=0.75) +
scale_color_manual(values = rep(c("#242565","#46557E"), 26 )) +
geom_hline(yintercept = sig.threshold, linetype = "dashed", colour = "grey37") +
# custom X axis:
scale_x_continuous(label = axisdf$Chromosome, breaks= axisdf$center , expand = c(0.01, 0.01)) +
scale_y_continuous(limits = c(0,10)) +
labs(x = "Chromosome") +
# Custom the theme:
theme_classic() +
theme(legend.position="none", panel.border = element_blank())
print(WholeGenome)
dev.off()
}
if (nrow(outlier_SNPs) > 0){
#Create new column where gene hits will be saved
outlier_SNPs$gene_id <- NA
outlier_SNPs$gene_name <- NA
for (ROW in 1:nrow(outlier_SNPs)){
print(paste0("Processing SNP ", ROW))
Genes_within_range <- getBM(attributes=c('ensembl_gene_id','external_gene_name','chromosome_name','start_position','end_position','gene_biotype'),
mart = ensembl,
filter = c('chromosome_name','start','end'),
values = list(outlier_SNPs$Chromosome[ROW],
outlier_SNPs$Position[ROW],
outlier_SNPs$Position[ROW]))
if (nrow(Genes_within_range) > 0){
Unique_protein_coding <- filter(Genes_within_range, gene_biotype == "protein_coding") %>%
dplyr::select(external_gene_name, ensembl_gene_id) %>% unique()
if (nrow(Unique_protein_coding) > 0){
outlier_SNPs$gene_id[ROW] <- Unique_protein_coding$ensembl_gene_id
outlier_SNPs$gene_name[ROW] <- Unique_protein_coding$external_gene_name
}
}
}
rm(Unique_protein_coding, Genes_within_range)
write.table(outlier_SNPs, paste0("outlier_SNPs/chr1_association_",PHENO,"_outliers.txt"), row.names = FALSE, quote = FALSE, sep = "\t")
outlier_SNPs <- read.delim(paste0("outlier_SNPs/chr1_association_",PHENO,"_outliers.txt"))
}
#For each chromosome find centre in n - used to add x axis labels
axisdf <- angsd.output %>% group_by(Chromosome) %>% summarize(center=(max(n) + min(n) ) / 2 )
if (nrow(outlier_SNPs) > 0){
pdf(file = paste0("Plots/","GWAS_",PHENO,".pdf"), height = 4, width = 10)
WholeGenome <- ggplot(angsd.output, aes(x=n, y=neg10, color=as.factor(Chromosome))) +
# Show all points
geom_point(size=0.75) +
scale_color_manual(values = rep(c("#242565","#46557E"), 26 )) +
geom_hline(yintercept = sig.threshold, linetype = "dashed", colour = "grey37") +
#geom_point(data = outlier_SNPs, colour = "#F71927", size=0.75) +
#ggrepel::geom_text_repel(data = outlier_SNPs, aes(label = gene_name), size = 3, colour = "black", force = 15, na.rm = TRUE, max.overlaps = Inf,min.segment.length = 0) +
# custom X axis:
scale_x_continuous(label = axisdf$Chromosome, breaks= axisdf$center , expand = c(0.01, 0.01)) +
scale_y_continuous(limits = c(0,10)) +
#scale_y_continuous(limits = c(0,0.31), expand = c(0.01, 0.01) ) +     # remove space between plot area and x axis
labs(x = "Chromosome") +
# Custom the theme:
theme_classic() +
theme(legend.position="none", panel.border = element_blank())
print(WholeGenome)
dev.off()
} else {
pdf(file = paste0("Plots/","GWAS_",PHENO,".pdf"), height = 4, width = 10)
WholeGenome <- ggplot(angsd.output, aes(x=n, y=neg10, color=as.factor(Chromosome))) +
# Show all points
geom_point(size=0.75) +
scale_color_manual(values = rep(c("#242565","#46557E"), 26 )) +
geom_hline(yintercept = sig.threshold, linetype = "dashed", colour = "grey37") +
# custom X axis:
scale_x_continuous(label = axisdf$Chromosome, breaks= axisdf$center , expand = c(0.01, 0.01)) +
scale_y_continuous(limits = c(0,10)) +
labs(x = "Chromosome") +
# Custom the theme:
theme_classic() +
theme(legend.position="none", panel.border = element_blank())
print(WholeGenome)
dev.off()
}
cale_y_continuous(limits = c(0,10)) +
dev.off()
if (nrow(outlier_SNPs) > 0){
pdf(file = paste0("Plots/","GWAS_",PHENO,".pdf"), height = 4, width = 10)
WholeGenome <- ggplot(angsd.output, aes(x=n, y=neg10, color=as.factor(Chromosome))) +
# Show all points
geom_point(size=0.75) +
scale_color_manual(values = rep(c("#242565","#46557E"), 26 )) +
geom_hline(yintercept = sig.threshold, linetype = "dashed", colour = "grey37") +
geom_point(data = outlier_SNPs, colour = "#F71927", size=0.75) +
#ggrepel::geom_text_repel(data = outlier_SNPs, aes(label = gene_name), size = 3, colour = "black", force = 15, na.rm = TRUE, max.overlaps = Inf,min.segment.length = 0) +
# custom X axis:
scale_x_continuous(label = axisdf$Chromosome, breaks= axisdf$center , expand = c(0.01, 0.01)) +
scale_y_continuous(limits = c(0,10)) +
#scale_y_continuous(limits = c(0,0.31), expand = c(0.01, 0.01) ) +     # remove space between plot area and x axis
labs(x = "Chromosome") +
# Custom the theme:
theme_classic() +
theme(legend.position="none", panel.border = element_blank())
print(WholeGenome)
dev.off()
} else {
pdf(file = paste0("Plots/","GWAS_",PHENO,".pdf"), height = 4, width = 10)
WholeGenome <- ggplot(angsd.output, aes(x=n, y=neg10, color=as.factor(Chromosome))) +
# Show all points
geom_point(size=0.75) +
scale_color_manual(values = rep(c("#242565","#46557E"), 26 )) +
geom_hline(yintercept = sig.threshold, linetype = "dashed", colour = "grey37") +
# custom X axis:
scale_x_continuous(label = axisdf$Chromosome, breaks= axisdf$center , expand = c(0.01, 0.01)) +
scale_y_continuous(limits = c(0,10)) +
labs(x = "Chromosome") +
# Custom the theme:
theme_classic() +
theme(legend.position="none", panel.border = element_blank())
print(WholeGenome)
dev.off()
}
if (nrow(outlier_SNPs) > 0){
pdf(file = paste0("Plots/","GWAS_",PHENO,".pdf"), height = 4, width = 10)
WholeGenome <- ggplot(angsd.output, aes(x=n, y=neg10, color=as.factor(Chromosome))) +
# Show all points
geom_point(size=0.75) +
scale_color_manual(values = rep(c("#242565","#46557E"), 26 )) +
geom_hline(yintercept = sig.threshold, linetype = "dashed", colour = "grey37") +
geom_point(data = outlier_SNPs, colour = "#F71927", size=0.75) +
#ggrepel::geom_text_repel(data = outlier_SNPs, aes(label = gene_name), size = 3, colour = "black", force = 15, na.rm = TRUE, max.overlaps = Inf,min.segment.length = 0) +
# custom X axis:
scale_x_continuous(label = axisdf$Chromosome, breaks= axisdf$center , expand = c(0.01, 0.01)) +
scale_y_continuous(limits = c(0,10)) +
#scale_y_continuous(limits = c(0,0.31), expand = c(0.01, 0.01) ) +     # remove space between plot area and x axis
labs(x = "Chromosome") +
# Custom the theme:
theme_classic() +
theme(legend.position="none", panel.border = element_blank())
print(WholeGenome)
dev.off()
} else {
pdf(file = paste0("Plots/","GWAS_",PHENO,".pdf"), height = 4, width = 10)
WholeGenome <- ggplot(angsd.output, aes(x=n, y=neg10, color=as.factor(Chromosome))) +
# Show all points
geom_point(size=0.75) +
scale_color_manual(values = rep(c("#242565","#46557E"), 26 )) +
geom_hline(yintercept = sig.threshold, linetype = "dashed", colour = "grey37") +
# custom X axis:
scale_x_continuous(label = axisdf$Chromosome, breaks= axisdf$center , expand = c(0.01, 0.01)) +
scale_y_continuous(limits = c(0,10)) +
labs(x = "Chromosome") +
# Custom the theme:
theme_classic() +
theme(legend.position="none", panel.border = element_blank())
print(WholeGenome)
dev.off()
}
setwd("/Users/ashse759/Dropbox/Uppsala_PostDoc/herring_low_pass/PCA_tshr_region/")
library(dplyr)
library(ggplot2)
library(ggthemes)
library(e1071)
#Read in covariance matrix for tshr region and compute eigenvalues and eigenvectors
cov <- as.matrix(read.table("HerringLowPass_GATKMethod_TSHR_region.cov"))
e <- eigen(cov)
#Extract first two PCs
PCs <- as.data.frame(e$vectors[,1:2])
#Add sample IDs to dataframe
PCs$sample.id <- readLines("sample.IDs.txt")
#Add spawning season info (extract from sample name if present)
PCs$spawning.season <- NA
View(PCs)
#Add sample IDs to dataframe
PCs$sample.id <- readLines("sample.IDs.txt")
View(PCs)
#Add spawning season info (extract from sample name if present)
PCs$spawning.season <- NA
for (SAMPLE in 1:nrow(PCs)){
if (stringr::str_detect(PCs$sample.id[SAMPLE], 'Spring') == TRUE){
PCs$spawning.season[SAMPLE] <- "Spring"
}
else if (stringr::str_detect(PCs$sample.id[SAMPLE], 'Autumn') == TRUE){
PCs$spawning.season[SAMPLE] <- "Autumn"
}
else if (stringr::str_detect(PCs$sample.id[SAMPLE], 'Summer') == TRUE){
PCs$spawning.season[SAMPLE] <- "Summer"
}
else if (stringr::str_detect(PCs$sample.id[SAMPLE], 'Winter') == TRUE){
PCs$spawning.season[SAMPLE] <- "Winter"
}
}
#Plot PC1 and 2
#Based on this Autumn and spring are segregating along PC1,
#though there are many of the hästskär samples are intermediate (the NAs)
P1 <- ggplot(data = PCs, aes(x = V1, y = V2, colour = spawning.season)) +
geom_point() +
labs(x = paste0("PC1 (",round(e$values[1],2),"%)"),
y = paste0("PC2 (",round(e$values[2],2),"%)"),
title = "TSHR region: 8.85-8.95Mb") +
theme_bw()
P1
P1
#Assign samples to 1 of 3 clusters along PC1 axis
centers <- cmeans(PCs$V1, 3)$centers
centers <- sort(centers)
cm <- cmeans(PCs$V1, centers = centers)
#Create data.frame storing cluster membership probabilities plus most likely assignment
membership <- as.data.frame(cm$membership)
membership$BestCluster <- cm$cluster
#Assign samples to a cluster so long as its assignment probability is at least 95%
PCs$cluster <- NA
for (SAMPLE in 1:nrow(membership)){
cluster_assigned <- membership$BestCluster[SAMPLE]
if (membership[SAMPLE,cluster_assigned] >= 0.80){
PCs$cluster[SAMPLE] <- membership$BestCluster[SAMPLE]
}
}
#Update cluster names
for (SAMPLE in 1:nrow(PCs)){
if (!is.na(PCs$cluster[SAMPLE]) && PCs$cluster[SAMPLE] == 1){
PCs$cluster[SAMPLE] <- "Spring-like"
}
else if (!is.na(PCs$cluster[SAMPLE]) && PCs$cluster[SAMPLE] == 2){
PCs$cluster[SAMPLE] <- "Intermediate"
}
else if (!is.na(PCs$cluster[SAMPLE]) && PCs$cluster[SAMPLE] == 3){
PCs$cluster[SAMPLE] <- "Autumn-like"
}
}
#Plot PCs this time colouring samples by infered spawing type
P2 <- ggplot(data = PCs, aes(x = V1, y = V2, colour = cluster)) +
geom_point() +
labs(x = paste0("PC1 (",round(e$values[1],2),"%)"),
y = paste0("PC2 (",round(e$values[2],2),"%)"),
title = "TSHR region: 8.85-8.95Mb") +
theme_bw()
P2
#
phenos <- read.delim("sample_lengths.txt")
ggplot(data = phenos, aes(x = inferred_spawning_season, y = body_length,
colour = inferred_spawning_season)) +
geom_point(position = "jitter") +
geom_boxplot(outlier.colour = NA, colour = "black", alpha = 0) +
scale_color_manual(values = c("#3498db","#2ecc71","#f1c40f"))
#Plot PCs this time colouring samples by infered spawing type
P2 <- ggplot(data = PCs, aes(x = V1, y = V2, colour = cluster)) +
geom_point() +
labs(x = paste0("PC1 (",round(e$values[1],2),"%)"),
y = paste0("PC2 (",round(e$values[2],2),"%)"),
title = "TSHR region: 8.85-8.95Mb") +
scale_color_manual(values = c("#3498db","#2ecc71","#f1c40f")) +
theme_bw()
#Plot PCs this time colouring samples by infered spawing type
P2 <- ggplot(data = PCs, aes(x = V1, y = V2, colour = cluster)) +
geom_point() +
labs(x = paste0("PC1 (",round(e$values[1],2),"%)"),
y = paste0("PC2 (",round(e$values[2],2),"%)"),
title = "TSHR region: 8.85-8.95Mb") +
scale_color_manual(values = c("#3498db","#2ecc71","#f1c40f")) +
theme_bw()
P2
#Plot PC1 and 2
#Based on this Autumn and spring are segregating along PC1,
#though there are many of the hästskär samples are intermediate (the NAs)
P1 <- ggplot(data = PCs, aes(x = V1, y = V2, colour = spawning.season)) +
geom_point() +
labs(x = paste0("PC1 (",round(e$values[1],2),"%)"),
y = paste0("PC2 (",round(e$values[2],2),"%)"),
title = "TSHR region: 8.85-8.95Mb") +
scale_color_manual(values = c("#3498db","#2ecc71","#f1c40f")) +
theme_bw()
P1
P2
ggplot(data = phenos, aes(x = inferred_spawning_season, y = body_length,
colour = inferred_spawning_season)) +
geom_point(position = "jitter") +
geom_boxplot(outlier.colour = NA, colour = "black", alpha = 0) +
scale_color_manual(values = c("#3498db","#2ecc71","#f1c40f"))
#Load spawning time of low pass samples infered by jake
low.pass.cluter.assignment <- read.delim("Samples_Final_Assignment_Table_Output.txt")
PCs <- PCs %>% dplyr::left_join(low.pass.cluter.assignment)
#Write to file
write.table(PCs, "PC_scores_tshr.txt", sep = "\t", row.names = FALSE)
#Plot PC1 vs PC2
#pdf(paste("temp.pdf"), width=3, height=3)
ggplot(data = PCs, aes(x = V1, y = V2, colour = spawning.season)) +
geom_point()
ggplot(data = PCs, aes(x = V1, y = V2, colour = primary_spawning_cluster)) +
geom_point()
ggplot(data = PCs, aes(x = V1, y = V2, colour = fine_scale_spawning_cluster)) +
geom_point()
ggplot(data = PCs, aes(x = V1, y = V2, colour = Intermediate_Cluster_Detailed)) +
geom_point()
#Plot PC1 vs PC2
#pdf(paste("temp.pdf"), width=3, height=3)
ggplot(data = PCs, aes(x = V1, y = V2, colour = spawning.season)) +
geom_point()
#Load spawning time of low pass samples infered by jake
low.pass.cluter.assignment <- read.delim("Samples_Final_Assignment_Table_Output.txt")
PCs <- PCs %>% dplyr::left_join(low.pass.cluter.assignment)
#Write to file
write.table(PCs, "PC_scores_tshr.txt", sep = "\t", row.names = FALSE)
ggplot(data = PCs, aes(x = V1, y = V2, colour = New_Clusters)) +
geom_point()
ggplot(data = PCs, aes(x = V1, y = V2, colour = New_clusters)) +
geom_point()
#Load spawning time of low pass samples infered by jake
low.pass.cluter.assignment <- read.delim("Samples_Final_Assignment_Table_Output.txt")
View(low.pass.cluter.assignment)
ggplot(data = PCs, aes(x = V1, y = V2, colour = new_clusters)) +
geom_point()
